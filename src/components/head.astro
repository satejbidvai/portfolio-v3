---
/**
 * Base Head component for all pages.
 * Contains common SEO meta tags, favicons, and theme scripts.
 */
interface Props {
  title: string;
  description: string;
  url: string;
  ogImage: string;
}

const { title, description, url, ogImage } = Astro.props;

const siteURL = Astro.site!.toString();
const fullURL = `${siteURL}${url}`;
---

<meta charset="utf-8" />

<!-- Favicons -->
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="manifest" href="/site.webmanifest" />

<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content="Satej Bidvai" />

<!-- Sitemap -->
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Open Graph -->
<meta property="og:type" content="website" />
<meta property="og:url" content={fullURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={ogImage} />
<meta property="og:image:alt" content={description} />

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:url" content={fullURL} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={ogImage} />

<!-- Theme Color -->
<meta name="theme-color" content="#09090B" />

<!-- Toggle theme color based on user preference -->
<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };

  const updateThemeColor = (isDark) => {
    const metaThemeColor = document.querySelector('meta[name="theme-color"]');
    if (metaThemeColor) metaThemeColor.setAttribute('content', isDark ? '#09090B' : '#FFFFFF');
  };

  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
  updateThemeColor(isDark);

  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');

      // Delay to sync with theme toggle animation
      setTimeout(() => updateThemeColor(isDark), 75);
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }
</script>
